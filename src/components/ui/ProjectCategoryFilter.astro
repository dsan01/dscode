---
import Foundations from '@generics/Foundations.astro'
import { CategoryFilterType, FoundationType } from 'src/types/enums'
import { type CategoryFilterFoundationProps as Props } from 'src/types/props'
import { getLangFromUrl, useTranslations } from 'src/i18n/utils'
const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

const { category } = Astro.props

const FoundationTypeTrans = () => {
  switch (category) {
    case CategoryFilterType.Desing:
      return {
        Foundation: FoundationType.Desing,
        Translation: t('service.desing'),
      }
    case CategoryFilterType.Develop:
      return {
        Foundation: FoundationType.Develop,
        Translation: t('service.develop'),
      }
    case CategoryFilterType.Managment:
      return {
        Foundation: FoundationType.Managment,
        Translation: t('service.managment'),
      }
    case CategoryFilterType.All:
      return { Foundation: null, Translation: t('projects.filter.all') }
  }
}
---

<button
  class='filter-button group font-body group data-selected:bg-primary-300 text-primary-400 border-primary-400 *:fill-primary-400 flex cursor-pointer items-center gap-2.5 rounded-full border bg-transparent px-3 py-1 text-xs transition-colors *:group-hover:fill-neutral-600 hover:border-neutral-600 hover:bg-neutral-400 hover:text-neutral-600 data-selected:cursor-default data-selected:border-neutral-700 data-selected:text-neutral-700 data-selected:*:fill-neutral-700!'
  data-category={category}
>
  {
    FoundationTypeTrans().Foundation != null ? (
      <Foundations
        Foundation={FoundationTypeTrans().Foundation}
        ClassSize='size-4'
        ClassColor='transition-colors'
      />
    ) : null
  }
  <span>{FoundationTypeTrans().Translation}</span>
</button>

<script>
  import { selectedFilter } from 'src/store/SelectedFilterStore'
  import type { CategoryFilterType } from 'src/types/enums'
  import { getElements } from '@lib/dom-selector'

  function setSelectedFilter(category: CategoryFilterType) {
    selectedFilter.set(category)
  }

  const selectedButtons = getElements(
    '.filter-button'
  ) as NodeListOf<HTMLButtonElement>

  selectedButtons.forEach((element) => {
    element.addEventListener('click', () => {
      setSelectedFilter(element.dataset.category)
    })
  })

  selectedFilter.subscribe((category) => {
    selectedButtons.forEach((button) => {
      if (button.dataset.category == category) {
        button.dataset.selected = ''
      } else {
        delete button.dataset.selected
      }
    })
  })
</script>
